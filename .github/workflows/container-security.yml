name: Azure OIDC Terraform Deploy

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC: true
      TF_BACKEND_CONTAINER: tfstate
      TF_BACKEND_KEY: devsecops-poc2.tfstate
      TF_BACKEND_STORAGE: gocloudopstfstate

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: true

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Check for Terraform Lock and Unlock if Needed
        run: |
          LOCK_BLOB=$(az storage blob list \
            --account-name $TF_BACKEND_STORAGE \
            --container-name $TF_BACKEND_CONTAINER \
            --query "[?name=='${TF_BACKEND_KEY}.lock'].name" -o tsv)
          if [ -n "$LOCK_BLOB" ]; then
            echo "Stale lock found: $LOCK_BLOB"
            LOCK_ID=$(az storage blob download \
              --account-name $TF_BACKEND_STORAGE \
              --container-name $TF_BACKEND_CONTAINER \
              --name "$LOCK_BLOB" \
              --file lock.json --output none && jq -r '.ID' lock.json)
            echo "Force unlocking lock ID: $LOCK_ID"
            terraform force-unlock -force $LOCK_ID ./terraform
          else
            echo "No stale lock found"
          fi
        shell: bash

      - name: Terraform Init
        run: terraform init -input=false
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform
